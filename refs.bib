@misc{pixis, title={Rop - Return Oriented Programming}, howpublished="\url{https://en.hackndo.com/return-oriented-programming/}", journal={hackndo}, publisher={Pixis}, author={Pixis}, year={2016}, month={Oct}}
@misc{el-sherei, title={Return oriented programming (ROP FTW) - exploit-db.com}, howpublished="\url{https://www.exploit-db.com/docs/english/28479-return-oriented-programming-(rop-ftw).pdf}", journal={Return-Oriented-Programming (ROP FTW)}, author={El-Sherei, Saif}}
@misc{proggen-rop, title={Return-oriented Programming (ROP)}, howpublished="\url{https://www.proggen.org/doku.php?id=security%3Amemory-corruption%3Aexploitation%3Arop}", journal={Return-oriented Programming (ROP) - Raum für Ideen}}
@misc{rny, howpublished="\url{https://renenyffenegger.ch/notes/Linux/fhs/proc/sys/kernel/randomize_va_space}", journal={/proc/sys/kernel/randomize_va_space}, author={Nyffenegger, Rene}}
@misc{retx86, title={X86 instruction set reference - Return from Procedure}, howpublished="\url{https://c9x.me/x86/html/file_module_x86_id_280.html}", journal={War on Theism: x86 Instruction Set Reference}} 
@inproceedings{hshacham,
author = {Shacham, Hovav},
title = {The Geometry of Innocent Flesh on the Bone: Return-into-Libc without Function Calls (on the X86)},
year = {2007},
isbn = {9781595937032},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1315245.1315313},
doi = {10.1145/1315245.1315313},
abstract = {We present new techniques that allow a return-into-libc attack to be mounted on x86 executables that calls no functions at all. Our attack combines a large number of short instruction sequences to build gadgets that allow arbitrary computation. We show how to discover such instruction sequences by means of static analysis. We make use, in an essential way, of the properties of the x86 instruction set.},
booktitle = {Proceedings of the 14th ACM Conference on Computer and Communications Security},
pages = {552–561},
numpages = {10},
keywords = {turing completeness, instruction set, return-into-libc},
location = {Alexandria, Virginia, USA},
series = {CCS '07}
}
@inproceedings{roperh,
author = {Buchanan, Erik and Roemer, Ryan and Shacham, Hovav and Savage, Stefan},
title = {When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC},
year = {2008},
isbn = {9781595938107},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1455770.1455776},
doi = {10.1145/1455770.1455776},
abstract = {This paper reconsiders the threat posed by Shacham's "return-oriented programming" -- a technique by which W-xor-X-style hardware protections are evaded via carefully crafted stack frames that divert control flow into the middle of existing variable-length x86 instructions -- creating short new instructions streams that then return. We believe this attack is both more general and a greater threat than the author appreciated. In fact, the vulnerability is not limited to the x86 architecture or any particular operating system, is readily exploitable, and bypasses an entire category of malware protections. In this paper we demonstrate general return-oriented programming on the SPARC, a fixed instruction length RISC architecture with structured control flow. We construct a Turing-complete library of code gadgets using snippets of the Solaris libc, a general purpose programming language, and a compiler for constructing return-oriented exploits. Finally, we argue that the threat posed by return-oriented programming, across all architectures and systems, has negative implications for an entire class of security mechanisms: those that seek to prevent malicious computation by preventing the execution of malicious code.},
booktitle = {Proceedings of the 15th ACM Conference on Computer and Communications Security},
pages = {27–38},
numpages = {12},
keywords = {SPARC, RISC, return-into-libc, return-oriented programming},
location = {Alexandria, Virginia, USA},
series = {CCS '08}
}
@article{ropsla,
author = {Roemer, Ryan and Buchanan, Erik and Shacham, Hovav and Savage, Stefan},
title = {Return-Oriented Programming: Systems, Languages, and Applications},
year = {2012},
issue_date = {March 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {1},
issn = {1094-9224},
url = {https://doi.org/10.1145/2133375.2133377},
doi = {10.1145/2133375.2133377},
abstract = {We introduce return-oriented programming, a technique by which an attacker can induce arbitrary behavior in a program whose control flow he has diverted, without injecting any code. A return-oriented program chains together short instruction sequences already present in a program’s address space, each of which ends in a “return” instruction.Return-oriented programming defeats the W⊕X protections recently deployed by Microsoft, Intel, and AMD; in this context, it can be seen as a generalization of traditional return-into-libc attacks. But the threat is more general. Return-oriented programming is readily exploitable on multiple architectures and systems. It also bypasses an entire category of security measures---those that seek to prevent malicious computation by preventing the execution of malicious code.To demonstrate the wide applicability of return-oriented programming, we construct a Turing-complete set of building blocks called gadgets using the standard C libraries of two very different architectures: Linux/x86 and Solaris/SPARC. To demonstrate the power of return-oriented programming, we present a high-level, general-purpose language for describing return-oriented exploits and a compiler that translates it to gadgets.},
journal = {ACM Trans. Inf. Syst. Secur.},
month = {mar},
articleno = {2},
numpages = {34},
keywords = {control flow integrity, return-into-libc, Return-oriented programming, attacks, RISC, W-xor-X, SPARC, memory safety, x86, NX}
}
